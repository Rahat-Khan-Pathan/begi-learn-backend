// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  type      String   @db.Text()
  details   String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserType {
  ADMIN
  MEMBER
}

enum Difficulty {
  Easy
  Medium
  Hard
}

model User {
  id              Int          @id @default(autoincrement())
  username        String       @unique() @db.Text()
  fullName        String       @db.Text()
  email           String       @unique() @db.Text()
  phoneNumber     String?      @db.Text()
  profileImageURL String?      @db.Text()
  password        String       @db.Text()
  role            UserType     @default(MEMBER)
  isActive        Boolean      @default(true)
  isVerified      Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  problemsCreated Problem[]
  submission      Submission[]
}

model Tag {
  id        Int       @id @default(autoincrement())
  tagName   String    @unique() @db.Text()
  problems  Problem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model TestCase {
  id        Int      @id @default(autoincrement())
  input     String   @db.Text()
  output    String   @db.Text()
  problemId Int
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  sample    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Problem {
  id           Int          @id @default(autoincrement())
  title        String       @db.Text()
  statement    String       @db.Text()
  difficulty   Difficulty   @default(Easy)
  inputFormat  String       @db.Text()
  outputFormat String       @db.Text()
  constraints  String       @db.Text()
  tags         Tag[]
  testCases    TestCase[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  creatorId    Int
  creator      User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  isActive     Boolean      @default(true)
  isVerified   Boolean      @default(false)
  submission   Submission[]
}

model ResponseTestCase {
  id           Int        @id @default(autoincrement())
  input        String
  output       String
  userOutput   String
  verdict      String
  submissionId Int
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model Submission {
  id        Int                @id @default(autoincrement())
  code      String             @db.Text()
  language  String             @db.Text()
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  result    String
  userId    Int
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemId Int
  problem   Problem            @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases ResponseTestCase[]
}
